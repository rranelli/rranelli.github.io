#+OPTIONS: -*- eval: (org-jekyll-mode); eval: (writegood-mode) -*-
#+AUTHOR: Renan Ranelli (renanranelli@gmail.com)
#+OPTIONS: toc:nil n:3
#+STARTUP: oddeven
#+STARTUP: hidestars
#+BEGIN_HTML
---
language: english
layout: post
comments: true
title: 'Writing a Redis client in pure bash'
---
#+END_HTML

* <p hidden>Writing a Redis client in pure bash<p hidden>

  *TL;DR*: After 180 hours of Witcher 3, it's time to get back to reality. In
  this post I will walk through the implementation of a simple =cli= for Redis
  using nothing but pure Bash script. This post has absolutely no practical
  implications other than providing an example to explain some of Bash's nice
  features.

  _<p hidden>excerpt-separator<p hidden>_

** The motivation for Bash

   I can skip this session if you're not interested in where the hell did I get
   the idea for this post.

   Although I work with Ruby, it's sometimes inevitable to feel the need to
   write bash scripts. Ruby is a much more capable and general (and modern)
   programming language but cannot beat the extreme availability of Bash.

   Recently I was refactoring the scripts we run at
   [[https://jenkins-ci.org/][Jenkins]]. I started rewriting those scripts in
   Ruby but came to an obvious limitation: One of those scripts configured the
   ruby version to use in the project. Well, setting up the ruby version to be
   used from *inside* of a ruby script is cumbersome at best. That was when I
   decided to use raw bash for the scripts.

   Since I have this problem that I can't work with something I don't
   understand, I started looking for materials to learn/understand the workings
   of Bash script. I asked people where I could learn more about Bash and one
   guy pointed me at [[https://github.com/caquino/redis-bash][this repository]] which is an implementation of a complete
   =cli= for Redis written in pure bash. For some reason I thought that writing
   a =cli= for Redis would surely be rocket science, so I started reading Bash's
   man page.

   In the meantime, I finished reading the great [[https://pragprog.com/book/rwdata/seven-databases-in-seven-weeks][seven databases in seven weeks]].
   At chapter 8, which deals with Redis, the author shows how one could interact
   with Redis using [[http://stackoverflow.com/questions/19515962/telnet-redis-bash-script][nothing but telnet]], and speaks wonders on how Redis make it
   easy for people to implement client libraries. (That's probably why every
   language ever seems to have a client to redis). By knowing in advance that a
   bash client is indeed feasible I thought: “Heck, this would be a nice
   non-trivial exercise for bash script-fu!”.

   And here we are.

   In the following sessions I will show step-by-step how I implemented my own
   client (without looking at the original implementation, believe me or not)
   and also explain relevant things about Bash.

** Getting started

   Redis' [[http://www.redis.io/topics/protocol][protocol]] (called RESP, for *RE*dis *S*erialization *P*rotocol)) is
   surprisingly simple. The protocol is human readable, very performant (being
   compared to binary alternatives) and easy to implement/parse. I do recommend
   the reader to take a quick look at the link above in order to have a deeper
   appreciation of what we will achieve in the next sessions.

   For the rest of this post I will assume you have the kind of familiarity
   needed to use a terminal with Bash. I expect you to know the meaning of
   things like =$VAR=, but not much more

   One of the greatest things I've seen when studying bash is the so-called “[[http://redsymbol.net/articles/unofficial-bash-strict-mode/][non
   official bash strict mode]]”. By using it I assure you will save yourself a lot
   of debugging time.

   #+begin_src sh
   #!/usr/bin/env bash
   set -euo pipefail
   #+end_src

   You should refer to the link above, but if you're too lazy, here is an
   extremely concise and lossy description of the options:

   - =-e= : stop the script if some command exits with exit status != 0
   - =-u= : stop the script if using some variable that is not available
   - =-o pipefail= : stop if anywhere inside a pipeline a command exits with
     status != 0

   =-u= is a MUST. Feels like going back to the days when I learned about VBA's
   [[https://msdn.microsoft.com/en-us/library/y9341s4f.aspx][Option Explicit]]. (God, my life is so much better now.)

** Talking to Redis

   In order to talk to Redis we need to set up a tcp socket (FIXME: is the thing
   I'm opening here really a tcp socket ? #idontknowwhatimdoing). Luckily Bash
   provides us a surprisingly easy way to do so using built-in redirection:

#+INCLUDE: ../../_code/writting-a-redis-client-in-pure-bash/01_mimiredis.sh src sh

   There are examples of using =<>= (FIXME: what is the name of this thing??) to
   [[http://www.linuxjournal.com/content/more-using-bashs-built-devtcp-file-tcpip][fetch web pages]]. Possibilities are endless. ^1

   If you run the script, you'll see the following output:

#+begin_src sh
$ bash redis-cli.sh
> +OK
>
#+end_src

   Great! We have just set the value of the key =somekey= to =33=!

   Notice that the prompt will hang indefinitely since we are reading the file
   descriptor =$redis_socket= until exhaustion. This operation is akin to
   calling =#to_a= in a Ruby's lazy enumerator or =#toList()= in a C#'s
   =Queryable=. Those structures might "enumerate" forever. We will fix this in
   the future.

** Allowing the user to send his own commands

   A =cli= that asks you to hard-code a command is probably not of use to
   anybody. We will now prompt the user for the command to send Redis. We can do
   this using the fantastic Bash's [[http://ss64.com/bash/read.html][read]] built-in command:

#+INCLUDE: ../../_code/writting-a-redis-client-in-pure-bash/02_mimiredis.sh src sh

   Running the script again:

   #+begin_src sh
$ bash redis-cli.sh
> mimi-redis> set somekey 42
> +OK
   #+end_src

   The output still hangs. We can run the script again and ask for the result of
   our last operation:

   #+begin_src sh
$ bash redis-cli.sh
> mimi-redis> get somekey
> $2 # <<< this means that the size of the next line is “2”
> 42 # <<< here is the actual value of somekey
   #+end_src

** A broken REPL (Read-eval-print-loop)

   The user of a =cli= probably wants to send more than one command in a single
   session. We will now change our script to accept commands multiple times. We
   will basically wrap everything in a =while= loop:

#+INCLUDE: ../../_code/writting-a-redis-client-in-pure-bash/03_mimiredis.sh src sh

   Running the script again:

   #+begin_src sh
$ bash redis-cli.sh
> mimi-redis> get somekey
> $2 # <<< this means that the size of the next line is “2”
> mimi-redis> set somekey 44
> 42 # <<< What?? This is the output of our first command !
> mimi-redis> sbrebols
> +OK # <<< ok... it seems we have a problem
   #+end_src

   The problem with our change is that we implicitly assume that every reply
   from Redis will be exactly one line long (=read= reads a single line per
   call). That is absolutely not true. We have to fix this.

** An actual REPL

   Every reply from Redis has as it's first character denoting some a sort of
   "type" for the subsequent data, according to the [[http://www.redis.io/topics/protocol][protocol specification]]. For
   example, =+= means a regular string will follow, =-= means an error will
   follow, and so on.

   So, we better handle the reply codes in order to show the user of our =REPL=
   what is happening. We can do this with a [[http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_03.html][switch-case]] over the first character
   of the reply.

#+INCLUDE: ../../_code/writting-a-redis-client-in-pure-bash/04_mimiredis.sh src sh

   I won't walk through every modification because I think you can get it by
   just reading the code. Check Redis' [[http://www.redis.io/topics/protocol][protocol specification]] to understand more
   of it's design rationale.

   Running a complete example now:

   #+begin_src sh
$ bash redis-cli.sh
> mimi-redis> get somekey
> 44 # alright! No metadata echoed to the screen.
> mimi-redis> set somekey 88
> OK # that's what we are expectnig
> mimi-redis> get somekey
> 88 # yeah!
> mimi-redis> sbrebols
> [ERROR] ERR unknown command 'sbrebols'
> mimi-redis>
   #+end_src

   Nice! We seem to have fixed the problem. I will stop here since this post
   seems to be way too long already.

** What's next?

   The next obvious step now is extract a =function= that will send commands to
   Redis, process Redis' reply and return the value to the caller. With this, we
   are able to distribute our logic as a library (We actually won't distribute,
   since [[https://github.com/caquino/redis-bash][there's already a full implementation of what we're doing out there]],
   but exercise stills the same)

   In a next post, I will walk trough the steps needed to extract what we wrote
   so far into a self contained function. (This will mostly consist of removing
   calls to =echo= and changing the calls to =read= slightly)

   Stay tuned!

   That's it.

   ---

   (1) Based on this example some hardcore Emacs would be thinking: “I could use
   this same wizardry to run http requests directly from my editor!”. But as is
   often the case with Emacs, [[https://github.com/pashky/restclient.el][multiple]] [[https://github.com/emacs-pe/http.el][folk]] have done it already.
